/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PathlessImport } from './routes/_pathless'
import { Route as IndexImport } from './routes/index'
import { Route as PathlessSchemeImport } from './routes/_pathless.scheme'
import { Route as PathlessRainbowImport } from './routes/_pathless.rainbow'
import { Route as PathlessPostitImport } from './routes/_pathless.postit'
import { Route as PathlessContrastImport } from './routes/_pathless.contrast'

// Create/Update Routes

const PathlessRoute = PathlessImport.update({
  id: '/_pathless',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PathlessSchemeRoute = PathlessSchemeImport.update({
  id: '/scheme',
  path: '/scheme',
  getParentRoute: () => PathlessRoute,
} as any)

const PathlessRainbowRoute = PathlessRainbowImport.update({
  id: '/rainbow',
  path: '/rainbow',
  getParentRoute: () => PathlessRoute,
} as any)

const PathlessPostitRoute = PathlessPostitImport.update({
  id: '/postit',
  path: '/postit',
  getParentRoute: () => PathlessRoute,
} as any)

const PathlessContrastRoute = PathlessContrastImport.update({
  id: '/contrast',
  path: '/contrast',
  getParentRoute: () => PathlessRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_pathless': {
      id: '/_pathless'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessImport
      parentRoute: typeof rootRoute
    }
    '/_pathless/contrast': {
      id: '/_pathless/contrast'
      path: '/contrast'
      fullPath: '/contrast'
      preLoaderRoute: typeof PathlessContrastImport
      parentRoute: typeof PathlessImport
    }
    '/_pathless/postit': {
      id: '/_pathless/postit'
      path: '/postit'
      fullPath: '/postit'
      preLoaderRoute: typeof PathlessPostitImport
      parentRoute: typeof PathlessImport
    }
    '/_pathless/rainbow': {
      id: '/_pathless/rainbow'
      path: '/rainbow'
      fullPath: '/rainbow'
      preLoaderRoute: typeof PathlessRainbowImport
      parentRoute: typeof PathlessImport
    }
    '/_pathless/scheme': {
      id: '/_pathless/scheme'
      path: '/scheme'
      fullPath: '/scheme'
      preLoaderRoute: typeof PathlessSchemeImport
      parentRoute: typeof PathlessImport
    }
  }
}

// Create and export the route tree

interface PathlessRouteChildren {
  PathlessContrastRoute: typeof PathlessContrastRoute
  PathlessPostitRoute: typeof PathlessPostitRoute
  PathlessRainbowRoute: typeof PathlessRainbowRoute
  PathlessSchemeRoute: typeof PathlessSchemeRoute
}

const PathlessRouteChildren: PathlessRouteChildren = {
  PathlessContrastRoute: PathlessContrastRoute,
  PathlessPostitRoute: PathlessPostitRoute,
  PathlessRainbowRoute: PathlessRainbowRoute,
  PathlessSchemeRoute: PathlessSchemeRoute,
}

const PathlessRouteWithChildren = PathlessRoute._addFileChildren(
  PathlessRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PathlessRouteWithChildren
  '/contrast': typeof PathlessContrastRoute
  '/postit': typeof PathlessPostitRoute
  '/rainbow': typeof PathlessRainbowRoute
  '/scheme': typeof PathlessSchemeRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessRouteWithChildren
  '/contrast': typeof PathlessContrastRoute
  '/postit': typeof PathlessPostitRoute
  '/rainbow': typeof PathlessRainbowRoute
  '/scheme': typeof PathlessSchemeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_pathless': typeof PathlessRouteWithChildren
  '/_pathless/contrast': typeof PathlessContrastRoute
  '/_pathless/postit': typeof PathlessPostitRoute
  '/_pathless/rainbow': typeof PathlessRainbowRoute
  '/_pathless/scheme': typeof PathlessSchemeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/contrast' | '/postit' | '/rainbow' | '/scheme'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/contrast' | '/postit' | '/rainbow' | '/scheme'
  id:
    | '__root__'
    | '/'
    | '/_pathless'
    | '/_pathless/contrast'
    | '/_pathless/postit'
    | '/_pathless/rainbow'
    | '/_pathless/scheme'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PathlessRoute: typeof PathlessRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PathlessRoute: PathlessRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_pathless"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_pathless": {
      "filePath": "_pathless.tsx",
      "children": [
        "/_pathless/contrast",
        "/_pathless/postit",
        "/_pathless/rainbow",
        "/_pathless/scheme"
      ]
    },
    "/_pathless/contrast": {
      "filePath": "_pathless.contrast.tsx",
      "parent": "/_pathless"
    },
    "/_pathless/postit": {
      "filePath": "_pathless.postit.tsx",
      "parent": "/_pathless"
    },
    "/_pathless/rainbow": {
      "filePath": "_pathless.rainbow.tsx",
      "parent": "/_pathless"
    },
    "/_pathless/scheme": {
      "filePath": "_pathless.scheme.tsx",
      "parent": "/_pathless"
    }
  }
}
ROUTE_MANIFEST_END */
